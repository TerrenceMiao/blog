{"meta":{"title":"Terrence Miao's Adventures","subtitle":"A journey of a thousand miles begins with a single step","description":"Veni, vidi, vici","author":"Terrence Miao","url":"https://terrencemiao.github.io/blog"},"posts":[{"title":"为什么要读书","date":"2017-09-03T06:09:19.000Z","path":"2017/09/03/为什么要读书/","text":"父子二人饮茶，儿问：“为什么要我读书？” 父答：“我这么跟你说吧！你读了书，喝这茶时就会说：‘此茶汤色澄红透亮，气味幽香如兰，口感饱满纯正，圆润如诗，回味甘醇，齿颊留芳，韵味十足，顿觉如梦似幻，仿佛天上人间，真乃茶中极品！’” 而如果你没有读书，你就会说：：“‘卧操！这茶不赖’” 为什么要读书近日对《中国诗词大会》上瘾，于是思考人为什么要读书？又如何用好的词语来描述心情和感受呢？ 有人曾提出这样一个问题：大部分读过的书最后都会忘掉，那读书的意义何在？这是我见过最好的回答：“小的时候我吃了很多东西，其中的大部分我已记不清是什么，但我知道，他们已经成了我现在的骨和肉”。读书，也是如此。它在不知不觉中就已经影响了你的思想，你的言行，你的形象。 1，当你开心的时候你可以说：春风得意马蹄疾一日看尽长安花 而不是只会说：哈哈, 哈哈, 哈哈, 哈哈, 哈哈哈 2，当你伤心的时候你可以说：问君能有几多愁，恰似一江春水向东流 而不是只会说：我的心好痛 3，当你看到帅哥时你可以说：陌上人如玉公子世无双 而不是只会说：我靠，好帅！我靠靠靠，太帅了 4，当你看到美女时你可以说：北方有佳人，绝世而独立 而不是只会说：我去，她好美我去，她真美 5，当你遇见渣男时你可以说：遇人不淑 ，识人不善 而不是只会说：瞎了老子的狗眼 6，当你向一个人表达爱意时你可以说：山有木兮木有枝心悦君兮君不知 而不是只会说：我喜欢你，天荒地老，海枯石烂 7，当你思念一个人的时候你可以说：衣带渐宽终不悔为伊消得人憔悴 而不是只会说：我想死你啦 8，当你失恋的时候你可以说：人生若只如初见何事秋风悲画扇等闲变却故人心却道故人心易变 而不是只会千万遍的呼喊：蓝瘦，香菇 9，结婚的时候你可以说：春宵一刻值千金花有清香月有阴 而不是只会说：嘿嘿, 嘿嘿, 嘿嘿嘿 10，分手的时候你可以说：相濡以沫不如相忘于江湖 而不是只会说：我们不合适 11，看见大漠戈壁的时候你可以说：大漠孤烟直，长河落日圆 而不是只会说：唉呀妈呀，这全都是沙子 12，看见夕阳余晖的时候你可以说：落霞与孤鹜齐飞秋水共长天一色 而不是只会说：卧槽这么多鸟真好看真他妈太好看了","tags":[]},{"title":"C10k / C10M Challenge","date":"2017-09-03T04:38:45.000Z","path":"2017/09/03/C10k-C10M-Challenge/","text":"C10k / C10M Challenge 挑战 HistoryThe term was coined in 1999 by Dan Kegel, citing the Simtel FTP host, cdrom.com, serving 10,000 clients at once over 1 gigabit per second Ethernet in that year. The term has since been used for the general issue of large number of clients, with similar numeronyms for larger number of connections, most recently C10M in the 2010s. By the early 2010s millions of connections on a single commodity 1U server became possible: over 2 million connections (WhatsApp, 24 cores, using Erlang on FreeBSD), 10–12 million connections (MigratoryData, 12 cores, using Java on Linux). C10k（concurrently handling 10k connections）是一个在 1999 年被提出来的技术挑战，如何在一颗 1GHz CPU，2G 内存，1Gbps 网络环境下，让单台服务器同时为 1 万个客户端提供 FTP 服务。而到了 2010 年后，随着硬件技术的发展，这个问题被延伸为 C10M，即如何利用 8 核心 CPU，64G 内存，在 10Gbps 的网络上保持 1000 万并发连接，或是每秒钟处理 100 万的连接。（两种类型的计算机资源在各自的时代都约为 1200 美元）。 C10k / C10M 问题则是从技术角度出发挑战软硬件极限。C10k / C10M 问题得解，成本问题和效率问题迎刃而解。 References C10k problem, https://en.wikipedia.org/wiki/C10k_problem The C10K problem, http://www.kegel.com/c10k.html The Secret To 10 Million Concurrent Connections - The Kernel Is The Problem Not The Solution, http://highscalability.com/blog/2013/5/13/the-secret-to-10-million-concurrent-connections-the-kernel-i.html Inside NGINX: How We Designed for Performance &amp; Scale, https://www.nginx.com/blog/inside-nginx-how-we-designed-for-performance-scale/ 架构师实践日｜从C10K到C10M高性能网络的探索与实践, http://blog.qiniu.com/archives/4941","tags":[]},{"title":"Plato and Socrates - 柏拉图麦穗问题","date":"2017-09-02T03:58:00.000Z","path":"2017/09/02/Plato-and-Socrates-柏拉图麦穗问题/","text":"One day, Plato asked his teacher Socrates, “What is love? How can I find it?” Socrates answered, “There is a vast wheat field in front. Walk forward without turning back, and pick only one stalk. If you find the most magnificent stalk, then you have found love.” Plato walked forward, and before long, he returned with empty hands, having picked nothing. His teacher asked, “Why did you not pick any stalk?” Plato answered, “Because I could only pick once, and yet I could not turn back. I did find the most magnificent stalk, but did not know if there were any better ones ahead, so I did not pick it. As I walked further, the stalks that I saw were not as good as the earlier one, so! I did not pick any in the end.” Socrates then said, “And that is LOVE.” On another day, Plato asked Socrates: “What is marriage? How can I find it?” His teacher answered, “There is a thriving forest in front. Walk forward without turning back, and chop down only one tree. If you find the tallest tree, then you have found marriage”. Plato walked forward, and before long, He returned with a tree. The tree was not bad but it was not tall, either. It was only an ordinary tree, not the best but just a good tree. His teacher asked, “Why did you chop down such an ordinary tree?” Plato answered, “Based on my previous experience, I had walked through the field, but returned with empty hands. This time, I saw this tree, and I felt that it was the first good tree I had seen, so I chopped it down and brought it back. I did not want to miss the chance.” Socrates then said, “And that is MARRIAGE. On another day, Plato asked his teacher, “What is life?” Socrates asked him to go to the forest again, allowed back and forth as well, and pluck the most beautiful flower. Plato walked forward. However he hadn’t come back for 3 days. His teacher went to find him. When he saw Plato’s camping in the forest, he asked:” Have you found the most beautiful flower?” Plato pointed a flower near to his camp and answered, “This is the most beautiful flower!” “Why didn’t you take it out?” Socrates asked. “Because if I pick it, it would be drooping. Even though I didn’t pick, it would die in a couple of days for sure. So I had been living by its side while it was blooming. When it’s drooped, I was up to find another one. This is the second most beautiful flower I have found!” Socrates then said, “You’ve got the truth of LIFE” “Love” is the most beautiful thing to happen to a person, it’s an opportunity you don’t realize its worth when you have it but only when it’s gone like the field of stalks. “Marriage” is like the tree you chopped, it’s a compromise; you pick the first best thing you see and learn to live a happy life with it. Having an affair is alluring. It’s like lightning - bright but disappeared so quickly that you cannot catch up with and keep it. “Life” is to follow and enjoy the every beautiful moment of living. That’s why you should enjoy your life wherever you live. 有一天，古希腊哲学家柏拉图问他的老师苏格拉底什么是爱情，他的老师就叫他先到麦田里，摘一棵全麦田里最大最金黄的的麦穗。期间只能摘一次，并且只可以向前走，不能回头。柏拉图于是照着老师的说话做。结果，他两手空空的走出麦田。老师问他为什么摘不到，他说：“因为只能摘一次，又不能走回头路，其间即使见到一棵又大又金黄的，因为不知前面是否有更好，所以没有摘；走到前面时，又发觉总不及之前见到的好，原来麦田里最大最金黄的麦穗，早就错过了；于是，我什么也没摘到。” 苏格拉底说：“这就是爱情。” 之后又有一天，柏拉图问他的老师什么是婚姻，他的老师就叫他先到树林里，砍下一棵全树林最大最茂盛、最适合放在家作圣诞树的树。其间同样只能摘一次，以及同样只可以向前走，不能回头。柏拉图于是照着老师的说话做。今次，他带了一棵普普通通，不是很茂盛，亦不算太差的树回来。老师问他，怎么带这棵普普通通的树回来。他说：“有了上一次经验，当我走到大半路程，已经感到累了却还两手空空时，我觉得虽然树林里还有很多树，但这棵树还是挺不错的，便砍下来，免得最后又什么也带不出来。” 苏格拉底说：“这就是婚姻。” 又有一天柏拉图又问老师苏格拉底什么是生活，苏格拉底还是叫他到树林走一次。要求是随便走，在途中要取一支最好看的花。柏拉图有了以前的教训又充满信心地出去过了三天三夜，他也没有回来。苏格拉底只好走进树林里去找他，最后发现柏拉图已在树林里安营扎寨。苏格拉底问他：“你找着最好看的花么？” 柏拉图指着边上的一朵花说：“这就是最好看的花。” 苏格拉底问：“为什么不把它带出去呢？” 柏拉图回答老师： “我如果把它摘下来，它马上就枯萎。即使我不摘它，它也迟早会枯。所以我就在它还盛开的时候，住在它边上。等它凋谢的时候，再找下一朵。这已经是我找着的第二朵最好看的花了。” 苏格拉底说： “你已经懂得生活的真谛了。” 爱情给人经历和回忆，之后，婚姻靠的是明智的决定和好好的把握，经过了这些考验，到最后才会明白生活是一种珍惜和守护。 柏拉图麦穗问题的数学解答 现在我们用数学的角度来讨论这个问题。 假设我们碰到的麦穗有 n 个，我们用这样的策略来选麦穗，前 k 个，记住一个最大的麦穗记为 d（可能是重量，也可能是体积），然后 k + 1 个开始，只要大于 d 的，就选择，否则就不选择。 对于某个固定的 k，如果最大的麦穗出现在了第 i 个位置（k &lt; i ≤ n），要想让他有幸正好被选中，就必须得满足前 i - 1 个麦穗中的最好的麦穗在前 k 个麦穗里，这有 k / (i - 1) 的可能。考虑所有可能的 i，我们便得到了前 k 个麦穗作为参考，能选中最大麦穗的总概率 P(k)： 设 k / n = x，并且假设 n 充分大，则上述公式可以改为： 对 x·ln(x) 求导，并令这个导数为 0，可以解出 x 的最优值，它就是欧拉研究的神秘常数的倒数 1 / e. 所以 k = n / e. 如果你想摘取最大的麦穗，假设有 n 个麦穗，你应该先将前 n / e 个麦穗作为参考，然后再 k + 1 个麦穗开始选择比前面 k 个最大的麦穗即可。 e = 2.718281828459 1 / e = 0.36787944117144 其他例子一、一楼到十楼的每层电梯门口都放着一颗钻石，钻石大小不一。你乘坐电梯从一楼到十楼，每层楼电梯门都会打开一次，只能拿一次钻石，问怎样才能拿到最大的一颗。 首先，这个题目说的，并不能完全拿到最大的钻石。但可以保证拿到最大钻石的概率最大。10 / e = 3.67，向上取整得 4。前四层皆不取，只记下最大的。后面遇到的，只要比前面最大的还大，取之即可。 二、秘书问题。在机率及博弈论上，秘书问题（类似名称有相亲问题、止步问题、见好就收问题、苏丹的嫁妆问题、挑剔的求婚者问题等) 内容是这样的： 要聘请一名秘书，有 n 人来面试。每次面试一人，面试过后便要即时决定聘不聘他，如果当时决定不聘他，他便不会回来。面试时总能清楚了解求职者的适合程度，并能和之前的每个人作比较。问凭什么策略，才使选得到最适合担任秘书的人的机率最大？ References 麦穗理论，又名“秘书问题” (1/e 处为最优分割点), http://geek.csdn.net/news/detail/231497","tags":[]},{"title":"Why Functional Programming?","date":"2017-08-17T13:15:35.000Z","path":"2017/08/17/Why-functional-programming/","text":"Why Static Type? 性能 - 方法调用速度更快，因为不需要在运行时才来判断调用的是哪个方法。 可靠性 - 编译器验证了程序的正确性，因而运行时崩溃的概率更低。 可维护性 - 陌生代码更容易维护，因为你可以看到代码中用到的对象的类型。 工具支持 - 静态类型使 IDE 能提供可靠的重构、精确的代码补全以及其他特性。 Benefit of Functional Programming 头等函数 - 把函数（一小段行为）当作值使用，可以用变量保存它，把它当作参数传递，或者当作其他函数的返回值。 不可变性 - 使用不可变对象，这保证了它们的状态在其创建之后不能再变化。 无副作用 - 使用的是纯函数。此类函数在输入相同时会产生同样的结果，并且不会修改其他对象的状态，也不会和外面的世界交互。 简洁 函数式风格的代码 比相应的命令式风格的代码更优雅、更简练，因为把函数当作值可以让你获得更强大的抽象能力，从而避免重复代码。 假设你有两段类似的代码，实现相似的任务但具体细节略有不同，可以轻易地将这段逻辑中公共的部分提取到一个函数中，并将其他不同的部分作为参数传递给它。这些参数本身也是函数，但你可以使用一种简洁的语法来表示这些匿名函数，被称作 lambda 表达式。 多线程安全 多线程程序中最大的错误来源之一就是，在没有采用适当同步机制的情况下，在不同的线程上修改同一份数据。如果你使用的是不可变数据结构和纯函数，就能保证这样不安全的修改根本不会发生，也就不需要考虑为其设计复杂的同步方案。 测试更加容易 没有副作用的函数可以独立地进行测试，因为不需要写大量的设置代码来构造它们所依赖的整个环境。 Functional programming, views a program as a mathematical function which is evaluated to produce a result value. That function may call upon nested functions, which in turn may call upon more nested functions. A nested function evaluates to produce a result. From there, that result is passed on to the enclosing function, which uses the nested function values to calculate its own return value. To enable functions to easily pass data to and from other functions, functional programming languages typically define data structures in the most generic possible way, as a collection of (any) things. They also allow functions to be passed to other functions as if they were data parameters. A function in this paradigm is not allowed to produce any side effects such as modifying a global variable that maintains state information. Instead, it is only allowed to receive parameters and perform some operations on them in order to produce its return value. Executing a functional program involves evaluating the outermost function, which in turn causes evaluation of all the nested functions, recursively down to the most basic functions that have no nested functions. Why is functional programming a big deal? Clarity Programming without side effects creates code that is easier to follow - a function is completely described by what goes in and what comes out. A function that produces the right answer today will produce the right answer tomorrow. This creates code that is easier to debug, easier to test, and easier to re-use. Brevity In functional languages, data is implicitly passed from a nested function to its parent function, via a general-purpose collection data type. This makes functional programs much more compact than those of other paradigms, which require substantial “housekeeping” code to pass data from one function to the next. Efficiency Because functions do not have side effects, operations can be re-ordered or performed in parallel in order to optimize performance, or can be skipped entirely if their result is not used by any other function. References Kotlin 初体验：主要特征与应用, http://geek.csdn.net/news/detail/231497 The Rise and Fall of Scala, https://dzone.com/articles/the-rise-and-fall-of-scala","tags":[]},{"title":"股市投资三要素","date":"2017-08-04T12:16:44.000Z","path":"2017/08/04/股市投资三要素/","text":"不要借钱投资 只买有长期投资价值的公司 不要用短期的钱去买长线的股票","tags":[]},{"title":"Customisation of Filco Majestouch 2 Mechanical Keyboard","date":"2017-08-01T16:29:45.000Z","path":"2017/08/02/Customisation-of-Filco-Majestouch-2-Mechanical-Keyboard/","text":"A Filco Majestouch 2 Tenkeyless Mechanical Keyboard, with Cherry Brown switches. It has been replaced with GMK Honeywell keycaps from Originative Co. (https://originative.co/products/honeywell) soon after it bought. Replace Filco Majestouch 2’s with GMK Honeywell keycaps. After joined Massdrop Lambo 80% Anodized Aluminum Case for Filco 87 TKL campaign (https://www.massdrop.com/buy/lambo-80-anodized-aluminum-case-for-filco-87-tkl) After a few months waiting, case delivered in, shipped from USA. Get hands warmed up and dirty. Now, show time.","tags":[]},{"title":"极简之道 - The interface 人与机器的思想交流","date":"2017-07-16T07:50:43.000Z","path":"2017/07/16/极简之道-The-interface-人与机器的思想交流/","text":"Why 60%? GH60 GH60 可编程键盘 (http://blog.komar.be/projects/gh60-programmable-keyboard/), it’s Poker 2 键盘的 rip-off。开放式公板设计。电路板中国制造。三周前，在 AliExpress (https://www.aliexpress.com/item/Customized-DIY-GH60-Case-Shell-PCB-Plate-Switches-LED-Kit-60-Mechanical-Keyboard-Satan-Poker2-GH/32651474350.html) 下的订单。 Cherry MX Switch 德国 Cherry 工厂的茶轴。敲起键盘来极有段落，层次感。 iQunix Lambo 拆掉原装的塑料键盘壳。换装 iQunix Lambo (https://www.aliexpress.com/item/Iqunix-lambo-60-mechanical-keyboard-anode-alumina-shell-base-gh60-poker2/32677061753.html) 铝制外壳。 GMK 3Run Keycap Set 最后再装上德国 GMK 工厂造的 3Run ABS keycaps 后 (https://www.massdrop.com/buy/gmk-3run-keycap-set) ，一个拥有自己 signature，体现个性，品味的机械键盘诞生了。 极简之道 / Simplicity","tags":[]},{"title":"IT 的终点是艺术 - The end of IT is Art","date":"2017-07-02T08:26:23.000Z","path":"2017/07/02/The-end-of-IT-is-Art/","text":"Modern, postmodern, and contemporary IT and its history.","tags":[]},{"title":"Ant Colony Optimization (ACO)","date":"2017-06-30T12:46:52.000Z","path":"2017/06/30/Ant-Colony-Optimization-ACO/","text":"Ant Colony Optimization (ACO) for the the Traveling Salesman Problem (TSP). In computer science and operations research, the ant colony optimization algorithm (ACO) is a probabilistic technique for solving computational problems which can be reduced to finding good paths through graphs. 蚁群算法是一种用来寻找优化路径的概率型算法。它由 Marco Dorigo 于 1992 年在他的博士论文中提出，其灵感来源于蚂蚁在寻找食物过程中发现路径的行为。这种算法具有分布计算、信息正反馈和启发式搜索的特征，本质上是进化算法中的一种启发式全局优化算法。 蚁群系统 (Ant System 或 Ant Colony System) 是由意大利学者 Dorigo、Maniezzo 等人于 20 世纪 90 年代首先提出来的。他们在研究蚂蚁觅食的过程中，发现单个蚂蚁的行为比较简单，但是蚁群整体却可以体现一些智能的行为。例如蚁群可以在不同的环境下，寻找最短到达食物源的路径。这是因为蚁群内的蚂蚁可以通过某种信息机制实现信息的传递。后又经进一步研究发现，蚂蚁会在其经过的路径上释放一种可以称之为“信息素”的物质，蚁群内的蚂蚁对“信息素”具有感知能力，它们会沿着“信息素”浓度较高路径行走，而每只路过的蚂蚁都会在路上留下“信息素”，这就形成一种类似正反馈的机制，这样经过一段时间后，整个蚁群就会沿着最短路径到达食物源了。 将蚁群算法应用于解决优化问题的基本思路为：用蚂蚁的行走路径表示待优化问题的可行解，整个蚂蚁群体的所有路径构成待优化问题的解空间。路径较短的蚂蚁释放的信息素量较多，随着时间的推进，较短的路径上累积的信息素浓度逐渐增高，选择该路径的蚂蚁个数也愈来愈多。最终，整个蚂蚁会在正反馈的作用下集中到最佳的路径上，此时对应的便是待优化问题的最优解。 蚂蚁找到最短路径要归功于信息素和环境，假设有两条路可从蚁窝通向食物，开始时两条路上的蚂蚁数量差不多：当蚂蚁到达终点之后会立即返回，距离短的路上的蚂蚁往返一次时间短，重复频率快，在单位时间里往返蚂蚁的数目就多，留下的信息素也多，会吸引更多蚂蚁过来，会留下更多信息素。而距离长的路正相反，因此越来越多的蚂蚁聚集到最短路径上来。 蚂蚁具有的智能行为得益于其简单行为规则，该规则让其具有多样性和正反馈。在觅食时，多样性使蚂蚁不会走进死胡同而无限循环，是一种创新能力；正反馈使优良信息保存下来，是一种学习强化能力。两者的巧妙结合使智能行为涌现，如果多样性过剩，系统过于活跃，会导致过多的随机运动，陷入混沌状态；如果多样性不够，正反馈过强，会导致僵化，当环境变化时蚁群不能相应调整。 与其他优化算法相比，蚁群算法具有以下几个特点： (1) 采用正反馈机制，使得搜索过程不断收敛，最终逼近最优解。(2) 每个个体可以通过释放信息素来改变周围的环境，且每个个体能够感知周围环境的实时变化，个体间通过环境进行间接地通讯。(3) 搜索过程采用分布式计算方式，多个个体同时进行并行计算，大大提高了算法的计算能力和运行效率。(4) 启发式的概率搜索方式不容易陷入局部最优，易于寻找到全局最优解。 该算法应用于其他组合优化问题，如旅行商问题、指派问题、Job Shop 调度问题、车辆路由问题、图着色问题和网络路由问题等。最近几年，该算法在网络路由中的应用受到越来越多学者的关注，并提出了一些新的基于蚂蚁算法的路由算法。同传统的路由算法相比较，该算法在网络路由中具有信息分布式性、动态性、随机性和异步性等特点，而这些特点正好能满足网络路由的需要。 VisualizationA visual demo of Ant Colony Optimisation written in Javascript (ES6): Another visual demo of Ant Colony Optimisation: References Ant colony optimization algorithms, https://en.wikipedia.org/wiki/Ant_colony_optimization_algorithms Visualisation of Ant Colony Optimisation, http://poolik.github.io/visual-aco/#/visualisation A visual demo of Ant Colony Optimisation applied to TSP written in Javascript, http://gordyd.github.io/js-aco/ 百度百科 - 蚁群算法, https://wapbaike.baidu.com/item/%E8%9A%81%E7%BE%A4%E7%AE%97%E6%B3%95","tags":[]},{"title":"Influence Without Authority","date":"2017-03-12T11:31:23.000Z","path":"2017/03/12/Influence-Without-Authority/","text":"The Psychology of Persuasion.","tags":[]},{"title":"Spring Data - powerful and succinct abstraction","date":"2017-03-03T23:05:30.000Z","path":"2017/03/04/Spring-Data-powerful-and-succinct-abstraction/","text":"Database tier definition Database tables, indexes and foreign keys defined in Liquibase configuration: 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122databaseChangeLog: - changeSet: id: 1 author: Terrence Miao changes: - createTable: tableName: draft_order columns: - column: name: id type: int autoIncrement: true constraints: primaryKey: true nullable: false - column: name: c_number type: varchar(32) constraints: nullable: false - column: name: source_time_in_ms type: bigint constraints: nullable: false - column: name: source_item_id type: varchar(255) constraints: nullable: false - column: name: shipment type: json constraints: nullable: false - column: name: shipment_id type: varchar(255) constraints: nullable: true - column: name: quantity type: int constraints: nullable: false - column: name: source_system type: varchar(255) constraints: nullable: false - column: name: status type: varchar(32) constraints: nullable: false - createIndex: columns: - column: name: source_item_id indexName: idx_source_item_id tableName: draft_order unique: false - createIndex: columns: - column: name: c_number - column: name: source_item_id indexName: idx_c_number_source_item_id tableName: draft_order unique: true - createTable: tableName: draft_order_combined columns: - column: name: id type: int autoIncrement: true constraints: primaryKey: true nullable: false - column: name: combined_id type: varchar(64) constraints: nullable: false - column: name: draft_order_id type: int constraints: nullable: false - addForeignKeyConstraint: baseColumnNames: draft_order_id baseTableName: draft_order_combined constraintName: fk_draft_order_combined_draft_order onDelete: CASCADE onUpdate: RESTRICT referencedColumnNames: id referencedTableName: draft_order - changeSet: id: 2 author: Terrence Miao changes: - addColumn: columns: - column: # For MySQL 5.7.x above, the first TIMESTAMP column in the table gets current timestamp as the default value, likely. So # if an INSERT or UPDATE without supplying a value, the column will get the current timestamp. Any subsequent TIMESTAMP # columns should have a default value explicitly defined. If you have two TIMESTAMP columns and if you don't specify a # default value for the second column, you will get this error while trying to create the table: # ERROR 1067 (42000): Invalid default value for 'COLUMN_NAME' name: date_created type: timestamp(3) constraints: nullable: false - column: name: date_updated type: timestamp(3) defaultValueComputed: LOCALTIMESTAMP(3) constraints: nullable: false tableName: draft_order DAO definition Draft Order 1234567891011121314151617181920212223242526272829303132@Entity@Table(name = \"draft_order\")public class DraftOrder implements Serializable &#123; @Id @GeneratedValue(strategy = GenerationType.AUTO) private Integer id; @Column(name = \"c_number\") private String cNumber; @Column(name = \"source_time_in_ms\") private Long sourceTimeInMs; @Column(name = \"source_item_id\") private String sourceItemId; @Column(name = \"shipment\", columnDefinition = \"json\") private String shipment; @Column(name = \"shipment_id\") private String shipmentId; @Column(name = \"quantity\") private Integer quantity; @Column(name = \"source_system\") private String sourceSystem; @Column(name = \"status\") private String status;&#125; Draft Order Combined 123456789101112131415@Entity@Table(name = \"draft_order_combined\")public class DraftOrderCombined implements Serializable &#123; @Id @GeneratedValue(strategy = GenerationType.AUTO) private Integer id; @Column(name = \"combined_id\") private String combinedId; @OneToOne(cascade = CascadeType.ALL) @JoinColumn(name = \"draft_order_id\") private DraftOrder draftOrder;&#125; An middle Aggregation Object 123456789101112public class CombinedIdSourceTimeInMs &#123; private Long counter; private String combinedId; private Long sourceTimeInMs; public CombinedIdSourceTimeInMs(Long counter, String combinedId, Long sourceTimeInMs) &#123; this.counter = counter; this.combinedId = combinedId; this.sourceTimeInMs = sourceTimeInMs; &#125;&#125; CRUD Repository definition DraftOrderRepository 1234567891011121314public interface DraftOrderRepository extends CrudRepository&lt;DraftOrder, Integer&gt; &#123; List&lt;DraftOrder&gt; findByCNumberAndStatusOrderBySourceTimeInMsDesc(String cNumber, String status, Pageable pageable); List&lt;DraftOrder&gt; findByCNumberAndSourceItemIdIn(String cNumber, List&lt;String&gt; sourceItemIds); DraftOrder findByCNumberAndSourceItemId(String cNumber, String sourceItemId); List&lt;DraftOrder&gt; findByShipmentIdInAndStatusAndSourceSystem(List&lt;String&gt; shipmentIds, String status, String sourceSystem); List&lt;DraftOrder&gt; findByCNumberAndId(String cNumber, Integer id); Long countByCNumberAndStatus(String cNumber, String status);&#125; DraftOrderCombinedRepository 12345678910111213141516171819public interface DraftOrderCombinedRepository extends CrudRepository&lt;DraftOrderCombined, Integer&gt; &#123; String FIND_QUERY = \"SELECT new org.paradise.data.dao.CombinedIdSourceTimeInMs\" + \"(count(doc) as counter, doc.combinedId as combinedId, min(doc.draftOrder.sourceTimeInMs) as sourceTimeInMs) \" + \" FROM DraftOrderCombined doc WHERE doc.draftOrder.cNumber = :cNumber AND doc.draftOrder.status = :status \" + \" GROUP BY combinedId \" + \" ORDER BY sourceTimeInMs DESC\"; String COUNT_QUERY = \"SELECT count(1) FROM \" + \"(SELECT count(1) FROM DraftOrderCombined doc WHERE doc.draftOrder.cNumber = :cNumber AND doc.draftOrder.status = :status\" + \" GROUP BY doc.combinedId)\"; @Query(value = FIND_QUERY, countQuery = COUNT_QUERY) List&lt;CombinedIdSourceTimeInMs&gt; countPerCombinedIdAndSourceTimeInMs(@Param(\"cNumber\") String cNumber, @Param(\"status\") String status, Pageable pageable); List&lt;DraftOrderCombined&gt; findByCombinedIdOrderByDraftOrderDaoSourceTimeInMsDesc(String combinedId);&#125; References Spring Data JPA Reference Documentation, https://docs.spring.io/spring-data/jpa/docs/current/reference/html/","tags":[]},{"title":"SQL script generates random data and insert into MySQL database","date":"2017-03-03T12:02:17.000Z","path":"2017/03/03/SQL-script-generates-random-data-and-insert-into-MySQL-database/","text":"1DROP PROCEDURE InsertRandomRecords; 12345678910111213141516DELIMITER $$CREATE PROCEDURE InsertRandomRecords(IN NumRows INT) BEGIN DECLARE i INT; SET i = 1; START TRANSACTION; WHILE i &lt;= NumRows DO INSERT INTO draftorders.draft_order (c_number, source_time_in_ms, source_item_id, shipment, shipment_id, quantity, source_system, status) VALUES ('C01234567890', RAND()*1000000000, CONCAT('randomSourceRef-', UUID_SHORT()), '&#123;\"to\": &#123;\"name\": \"T T\", \"lines\": [\"Lvl 100\", \"123 smith st\"], \"phone\": \"0356567567\", \"state\": \"VIC\", \"suburb\": \"Greensborough\", \"postcode\": \"3088\", \"business_name\": \"In debt\"&#125;, \"from\": &#123;\"name\": \"Carl Block\", \"lines\": [\"1341 Dandenong Road\"], \"state\": \"VIC\", \"suburb\": \"Geelong\", \"postcode\": \"3220\"&#125;, \"items\": [&#123;\"width\": \"10\", \"height\": \"10\", \"length\": \"10\", \"weight\": \"10\", \"product_id\": \"3D85\", \"item_reference\": \"blocked\", \"authority_to_leave\": true, \"allow_partial_delivery\": true, \"contains_dangerous_goods\": true&#125;], \"shipment_reference\": \"My second shipment ref\", \"customer_reference_1\": \"cr1234\", \"customer_reference_2\": \"cr5678\"&#125;', UUID(), 1, 'EBAY', ELT(1 + FLOOR(RAND()*3), 'DRAFT', 'READY_TO_SHIP', 'SHIPPED')); SET i = i + 1; END WHILE; COMMIT; END$$DELIMITER ; To generate 1,000,000 draft orders: 1CALL InsertRandomRecords(1000000);","tags":[]},{"title":"Set up and run AWS Lambda 'hello' function with serverless","date":"2017-02-26T08:00:26.000Z","path":"2017/02/26/Set-up-and-run-AWS-Lambda-hello-function-with-serverless/","text":"serverlessWith latest Node.js 6.x.x installed, then install serverless globally: 1$ npm install serverless -g AWS LambdaCreate a AWS Lambda skeleton project with serverless: 1234567891011121314$ mkdir serverless-example &amp;&amp; cd $_$ sls create -t aws-nodejsServerless: Generating boilerplate... _______ __| _ .-----.----.--.--.-----.----| .-----.-----.-----.| |___| -__| _| | | -__| _| | -__|__ --|__ --||____ |_____|__| \\___/|_____|__| |__|_____|_____|_____|| | | The Serverless Application Framework| | serverless.com, v1.7.0 -------'Serverless: Successfully generated boilerplate for template: \"aws-nodejs\"Serverless: NOTE: Please update the \"service\" property in serverless.yml with your service name Policies set up for Lambda function For AWS user “ec2-user”, now need to have some policies with permissions to let “serverless” create role, Lambda function and deployment it … Roles for Lambda function Lambda function role created after Lambda function added and deployed into AWS. DeploymentMake sure AWS environment has been set up, including access key, user, group, policies … Pack and deploy Lambda example into AWS: 123456789101112131415161718$ sls deploy -r ap-southeast-2 -s devServerless: Packaging service...Serverless: Uploading CloudFormation file to S3...Serverless: Uploading service .zip file to S3 (583 B)...Serverless: Updating Stack...Serverless: Checking Stack update progress.....................Serverless: Stack update finished...Service Informationsservice: serverless-examplestage: devregion: ap-southeast-2api keys: Noneendpoints: Nonefunctions: serverless-example-dev-hello Lambda “hello” function A “hello” Lambda function has been created in Lambda after it’s deployed into AWS by “serverless”. Events generated during Lambda function deployment Deployment events generated during Lambda “hello” function deployed into AWS. Add Lambda Trigger on AWS API Gateway Manually create a Lambda Trigger. This time we use AWS API Gateway to trigger / invoke Lambda “hello” function. Exposed Lambda API Gateway After Lambda Trigger created, an exposed RESTful interface for Lambda “hello” function. Say “hello”Set up AWS API Gateway trigger for Lambda “hello” function. Go to url, e.g.: Function “hello” log: 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657&#123; \"message\": \"Go Serverless v1.0! Your function executed successfully!\", \"input\": &#123; \"resource\": \"/serverless-example-dev-hello\", \"path\": \"/serverless-example-dev-hello\", \"httpMethod\": \"GET\", \"headers\": &#123; \"Accept\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\", \"Accept-Encoding\": \"gzip, deflate, sdch, br\", \"Accept-Language\": \"en-AU,en-GB;q=0.8,en-US;q=0.6,en;q=0.4\", \"CloudFront-Forwarded-Proto\": \"https\", \"CloudFront-Is-Desktop-Viewer\": \"true\", \"CloudFront-Is-Mobile-Viewer\": \"false\", \"CloudFront-Is-SmartTV-Viewer\": \"false\", \"CloudFront-Is-Tablet-Viewer\": \"false\", \"CloudFront-Viewer-Country\": \"AU\", \"Host\": \"b5dyhej16l.execute-api.ap-southeast-2.amazonaws.com\", \"Referer\": \"https://ap-southeast-2.console.aws.amazon.com/lambda/home?region=ap-southeast-2\", \"upgrade-insecure-requests\": \"1\", \"User-Agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.95 Safari/537.36\", \"Via\": \"2.0 6884828476070d32978b45d03c1cc437.cloudfront.net (CloudFront)\", \"X-Amz-Cf-Id\": \"mvToMffe1AsUJNcMJKUh-Rx26oBJsRBe2n9I1df3xqIAIENPR_ku3A==\", \"X-Amzn-Trace-Id\": \"Root=1-58aae2ff-0b0c5e4059cc97576211ba4a\", \"X-Forwarded-For\": \"101.181.175.227, 54.239.202.65\", \"X-Forwarded-Port\": \"443\", \"X-Forwarded-Proto\": \"https\" &#125;, \"queryStringParameters\": null, \"pathParameters\": null, \"stageVariables\": null, \"requestContext\": &#123; \"accountId\": \"624388274630\", \"resourceId\": \"5jbqsp\", \"stage\": \"prod\", \"requestId\": \"51ba2876-f769-11e6-b507-4b10c8a6886a\", \"identity\": &#123; \"cognitoIdentityPoolId\": null, \"accountId\": null, \"cognitoIdentityId\": null, \"caller\": null, \"apiKey\": null, \"sourceIp\": \"101.181.175.227\", \"accessKey\": null, \"cognitoAuthenticationType\": null, \"cognitoAuthenticationProvider\": null, \"userArn\": null, \"userAgent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.95 Safari/537.36\", \"user\": null &#125;, \"resourcePath\": \"/serverless-example-dev-hello\", \"httpMethod\": \"GET\", \"apiId\": \"b5dyhej16l\" &#125;, \"body\": null, \"isBase64Encoded\": false &#125;&#125; References serverless framework, https://serverless.com/ Example source code and artefact, https://github.com/TerrenceMiao/AWS/tree/master/serverless-example","tags":[]},{"title":"The State Quadrants - Functional vs. Object Oriented","date":"2017-02-18T12:19:56.000Z","path":"2017/02/18/The-State-Quadrants-Functional-vs-Object-Oriented/","text":"","tags":[]},{"title":"Factorial function implementation in Java 8","date":"2017-02-18T11:15:33.000Z","path":"2017/02/18/Factorial-function-implementation-in-Java-8/","text":"Implementation1234567891011121314151617181920212223242526package org.paradise.function;import java.util.HashMap;import java.util.Map;import java.util.function.Function;/** * Created by terrence on 12/12/2016. */public final class FactorialFunction &#123; public static final Map&lt;Integer, Long&gt; FACTORIAL_MAP = new HashMap&lt;&gt;(); public static final Function&lt;Integer, Long&gt; FACTORIAL = (x) -&gt; FACTORIAL_MAP.computeIfAbsent(x, n -&gt; n * FactorialFunction.FACTORIAL.apply(n - 1)); static &#123; FACTORIAL_MAP.put(1, 1L); // FACTORIAL(1) &#125; private FactorialFunction() &#123; &#125;&#125; Unit test123456789101112131415161718192021package org.paradise.function;import org.junit.Test;import static org.junit.Assert.assertEquals;/** * Created by terrence on 12/12/2016. */public class FactorialFunctionTest &#123; @Test public void testFactorialFunction() throws Exception &#123; assertEquals(\"Incorrect result\", Long.valueOf(1), FactorialFunction.FACTORIAL.apply(1)); assertEquals(\"Incorrect result\", Long.valueOf(2), FactorialFunction.FACTORIAL.apply(2)); assertEquals(\"Incorrect result\", Long.valueOf(3628800), FactorialFunction.FACTORIAL.apply(10)); &#125;&#125;","tags":[]},{"title":"Fibonacci function implementation in Java 8","date":"2017-02-18T11:09:56.000Z","path":"2017/02/18/Fibonacci-function-implementation-in-Java-8/","text":"Implementation123456789101112131415161718192021222324252627package org.paradise.function;import java.util.HashMap;import java.util.Map;import java.util.function.Function;/** * Created by terrence on 12/12/2016. */public final class FibonacciFunction &#123; public static final Map&lt;Integer, Long&gt; FIBONACCI_MAP = new HashMap&lt;&gt;(); public static final Function&lt;Integer, Long&gt; FIBONACCI = (x) -&gt; FIBONACCI_MAP.computeIfAbsent(x, n -&gt; FibonacciFunction.FIBONACCI.apply(n - 2) + FibonacciFunction.FIBONACCI.apply(n - 1)); static &#123; FIBONACCI_MAP.put(0, 0L); // FIBONACCI(0) FIBONACCI_MAP.put(1, 1L); // FIBONACCI(1) &#125; private FibonacciFunction() &#123; &#125;&#125; Unit test12345678910111213141516171819202122232425262728293031package org.paradise.function;import org.junit.Test;import static org.junit.Assert.assertEquals;/** * Created by terrence on 12/12/2016. */public class FibonacciFunctionTest &#123; @Test public void testFibonacciFunction() throws Exception &#123; assertEquals(\"Incorrect result\", Long.valueOf(0), FibonacciFunction.FIBONACCI.apply(0)); assertEquals(\"Incorrect result\", Long.valueOf(1), FibonacciFunction.FIBONACCI.apply(1)); assertEquals(\"Incorrect result\", Long.valueOf(1), FibonacciFunction.FIBONACCI.apply(2)); assertEquals(\"Incorrect result\", Long.valueOf(2), FibonacciFunction.FIBONACCI.apply(3)); assertEquals(\"Incorrect result\", Long.valueOf(3), FibonacciFunction.FIBONACCI.apply(4)); assertEquals(\"Incorrect result\", Long.valueOf(5), FibonacciFunction.FIBONACCI.apply(5)); assertEquals(\"Incorrect result\", Long.valueOf(8), FibonacciFunction.FIBONACCI.apply(6)); assertEquals(\"Incorrect result\", Long.valueOf(13), FibonacciFunction.FIBONACCI.apply(7)); assertEquals(\"Incorrect result\", Long.valueOf(21), FibonacciFunction.FIBONACCI.apply(8)); assertEquals(\"Incorrect result\", Long.valueOf(34), FibonacciFunction.FIBONACCI.apply(9)); assertEquals(\"Incorrect result\", Long.valueOf(55), FibonacciFunction.FIBONACCI.apply(10)); assertEquals(\"Incorrect result\", Long.valueOf(12586269025L), FibonacciFunction.FIBONACCI.apply(50)); &#125;&#125;","tags":[]},{"title":"Remote debugging Java applications run on Tomcat","date":"2017-02-11T02:52:26.000Z","path":"2017/02/11/Remote-debugging-Java-applications-run-on-Tomcat/","text":"Enable JVM option to attach a remote debugger: 1$ export JAVA_OPTS=-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5005 “suspend” set to “y” is to let remote debugger start loading the application. Now, start running Tomcat. JVM debugging port is bound on port 5005i on the machine runs on Tomcat. Next, set up SSH tunnel mirror remotei host (ip-10-213-79-77.ap-southeast-2.compute.internal) 5005 port to localhost on port 5005. For example: 1$ ssh -L 5005:ip-10-213-79-77.ap-southeast-2.compute.internal:5005 -l ec2-user ip-10-213-79-77.ap-southeast-2.compute.internal You can start remote debugging in IDE like IntelliJ and debug the code since.","tags":[]},{"title":"Web Components are coming","date":"2017-02-01T12:56:19.000Z","path":"2017/02/01/Web-Components-are-coming/","text":"AngularJS is going to continue to succeed for some time. But change is inevitable. Web Components are coming. WebComponents create the ability to do all the sorts of markup-driven programming like AngularJS, ReactJS, but less ecosystem dependent. Because DOM is integration point for all the kinds of JavaScript frameworks. Web Components make it MUCH easier to interoperate between components. The future isn’t here yet, but it will change fundamental assumptions about how a JavaScript framework should act and what it should be responsible for. Those shifts in assumptions frequently cause frameworks will drop out of the ecosystem quickly than expected. URL: https://www.webcomponents.org/","tags":[]},{"title":"Perfection","date":"2017-02-01T12:35:24.000Z","path":"2017/02/01/Perfection/","text":"Il semble que la perfection soit atteinte non quand il n’y a plus rien à ajouter, mais quand il n’y a plus rien à retrancher. 1- Antoine de saint Exupery It seems that perfection is attained not when there is nothing more to add, but when there is nothing more to remove.","tags":[]},{"title":"Setup Docker Private Registry in Nexus Repository OSS 3.x.x","date":"2017-01-28T03:37:50.000Z","path":"2017/01/28/Setup-Docker-Private-Registry-in-Nexus-Repository-OSS-3-x-x/","text":"Make sure Nexus Repository has been setup with Self Signed certificate, certificate for host/server e.g. “silencer.bigpond”. The following instructions have been successfully tested in Nexus version 3.2.0-01. Create Docker Hub repository in Nexus Create Docker Internal repository in Nexus Create Docker Group repository in Nexus Run Docker with Docker NativeAdd Docker Private Registry in Insecure Registries Now this approach supports docker pull and docker push. Work around with “x509: certificate signed by unknown authority“ error by adding “–disable-content-trust” option on docker push command line if Docker doesn’t accept Self-Signed certificate. Add Docker Private Registry server’s certificate into Docker Virtual Machine CA list1234567891011121314151617181920𝜆 keytool -printcert -rfc -sslserver silencer.bigpond:8444 &gt; silencer.bigpond.pem-----BEGIN CERTIFICATE-----MIIDkDCCAnigAwIBAgIEAqo9kTANBgkqhkiG9w0BAQsFADBgMQswCQYDVQQGEwJBVTEUMBIGA1UECBMLVW5zcGVjaWZpZWQxFDASBgNVBAcTC1Vuc3BlY2lmaWVkMREwDwYDVQQKEwhTb25hdHlwZTESMBAGA1UEAwwJKi5iaWdwb25kMB4XDTE2MDYxMjExMzY1M1oXDTMwMDIxOTExMzY1M1owYDELMAkGA1UEBhMCQVUxFDASBgNVBAgTC1Vuc3BlY2lmaWVkMRQwEgYDVQQHEwtVbnNwZWNpZmllZDERMA8GA1UEChMIU29uYXR5cGUxEjAQBgNVBAMMCSouYmlncG9uZDCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAJNO5mDpBDQQ8n4t0P2z8ChWzIFQ3Pf+5U8x6P17O3WtKTfsbuRYobHYmas5tVdVdnLIqpb4JV9DWIoS+CNG6cRLy3GIWWT7CbjsrpDlOTArslvk3KuzQ0dsZNflRfdd+ughI2LczehEfhzPJzA+ZU8Am1CadM+VUa+T6MilFQMXpWfjND6BNnV+qr/MX1QQfSjiWt7oWBex0BB0VPv9ooBZUqO+8jk5fUY8wEIa/kqLUqIKGxIUx9BMQBwBJwDKZmK93DXSPvAFYbKQjj6/nbV9R1VWmR7fhkLG+Ixlx5ld2dxv4+xvXmS8s4NanBtKZWUfEYVPp7gUF9HZoW9A1jcCAwEAAaNSMFAwDAYDVR0TBAUwAwEB/zAhBgNVHREEGjAYghBzaWxlbmNlci5iaWdwb25khwQKAAAJMB0GA1UdDgQWBBQV3WTuC+GI8lHtH0uL+kYqTG+vczANBgkqhkiG9w0BAQsFAAOCAQEAUwL+qnKVT0ENZEZnDjB+cjPfvkeWOD05PrGUOn4YB4vllq2S6Cgfm0OaZ+vMt3KMXPf9pIgZ797jdPhOP/s5IVJItldky+u/Hk9gNtUwEjpgl0MjhSm/PqxR5XoJdkYlvUdtq+PTrU5RU3v3GImeOmlI4mM5PaZ6OT8HC5VMX5s9RawBr/5EbJHRM7EN8r3g4Y/2109YoHoiWAhnN6TC3RhmCoQqGOiPsS732KHUz3KqXVbq9VTRdA3dXqFj1cUSet1TXTPisaiehffvbqYm2vrJ5WYgqCwb8TadDg66TToj080qvA8cXAF7qlA8pOImrbVOs7tdANSAs+AOcqCkiA==-----END CERTIFICATE----- 1𝜆 screen ~/Library/Containers/com.docker.docker/Data/com.docker.driver.amd64-linux/tty Inside Docker Virtual Machine, follow these steps: 123$ sudo cat silencer.bigpond.pem &gt;&gt; /etc/ssl/certs/ca-certificates.crt$ sudo /etc/init.d/docker restart$ tail -f /var/lib/boot2docker/docker.log With Docker ToolboxAdd Docker Private Registry server’s certificate into Docker Virtual Machine CA list12𝜆 keytool -printcert -rfc -sslserver silencer.bigpond:8444 &gt; silencer.bigpond.pem𝜆 docker-machine ssh default Inside Docker Virtual Machine, follow these steps:123$ sudo cat silencer.bigpond.pem &gt;&gt; /etc/ssl/certs/ca-certificates.crt$ sudo /etc/init.d/docker restart$ tail -f /var/lib/boot2docker/docker.log Press Ctrl + D and Ctrl + D to exist SCREEN program. Type “screen -r” to re-entry SCREEN program. Additional CertificatesDownload 3rd party Repository server’s certificate. Use tool like KeyStore Explorer to add 3rd party server certificates into existing keystore.jks. Due to a certificate chain that does not exist within the existing Java truststore, Java does not trust the certificate and fails to connect to the application. Test1234𝜆 docker login silencer.bigpond:18443Username: adminPassword: admin123Login Succeeded 12𝜆 docker search silencer.bigpond:18443/tomcat𝜆 docker pull silencer.bigpond:18443/jtech/tomcat:latest 1234𝜆 docker login silencer.bigpond:18444Username: adminPassword: admin123Login Succeeded 123𝜆 docker build -t jtech/camel-spring:latest .𝜆 docker tag jtech/camel-spring silencer.bigpond:18444/jtech/camel-spring:latest𝜆 docker push silencer.bigpond:18444/jtech/camel-spring:latest 1𝜆 docker push --disable-content-trust silencer.bigpond:18444/jtech/camel-spring:latest Note Due to Docker Virtual Machine is immutable, the CA certificate added change made inside VM is ephemeral, and lost after VM is restarted Docker Private Registry ONLY supports HTTPS, NOT HTTP Nexus repository MUST register and use server certificate for host e.g. “silencer.bigpond”, NOT “localhost.bigpond” to run Docker Private Registry Try with “–disable-content-trust” if error like “Get https://silencer.gateway:18444/v1/_ping: x509: certificate signed by unknown authority” Reference Private Registry for Docker, https://books.sonatype.com/nexus-book/3.0/reference/docker.html Using Self-Signed Certificates with Nexus Repository Manager and Docker Daemon, https://support.sonatype.com/hc/en-us/articles/217542177 SSL Certificate Guide, https://support.sonatype.com/hc/en-us/articles/213465768 Setup HTTPS access Nexus Repository, https://github.com/TerrenceMiao/nexus/wiki/Setup-HTTPS-access-Nexus-Repository-Manager-OSS-3.xx Add Self Signed CA certificate into Docker’s CA list, https://github.com/klippx/inject-docker-certs Adding Self Signed certificate in Docker Native for Mac, https://forums.docker.com/t/adding-self-signed-certificates/9761","tags":[]},{"title":"Setup HTTPS access in Nexus Repository Manager OSS 3.x.x","date":"2017-01-28T02:20:47.000Z","path":"2017/01/28/Setup-HTTPS-access-in-Nexus-Repository-Manager-OSS-3-x-x/","text":"Generate Self Signed certificateOn a Mac at home, with Bigpond internet access. Full host name is silencer.bigpond and IP Address is 10.0.0.9. 12terrence@Silencer /Applications/nexus-3.0.0-03/etc/ssl00:13:05 𝜆 keytool -genkeypair -keystore keystore.jks -storepass changeit -keypass changeit -alias jetty -keyalg RSA -keysize 2048 -validity 5000 -dname \"CN=*.bigpond, O=Sonatype, L=Unspecified, ST=Unspecified, C=AU\" -ext \"SAN=DNS:silencer.bigpond,IP:10.0.0.9\" -ext \"BC=ca:true\" OR run “nslookup 127.0.0.1” return full domain hostname e.g. “localhost.bigpond”. 12terrence@Silencer /Applications/nexus-3.0.0-03/etc/ssl00:13:05 𝜆 keytool -genkeypair -keystore keystore.jks -storepass changeit -keypass changeit -alias jetty -keyalg RSA -keysize 2048 -validity 5000 -dname \"CN=*.bigpond, O=Sonatype, L=Unspecified, ST=Unspecified, C=AU\" -ext \"SAN=DNS:localhost.bigpond,IP:127.0.0.1\" -ext \"BC=ca:true\" Now, with latest Nexus (version 3.2.0-01) you can use self-signed server certificate without specifying IP address. 12terrence@Silencer /usr/local/nexus-3.2.0-01/etc/ssl00:13:05 𝜆 keytool -genkeypair -keystore keystore.jks -storepass changeit -keypass changeit -alias jetty -keyalg RSA -keysize 2048 -validity 5000 -dname \"CN=*.gateway, O=Sonatype, L=Unspecified, ST=Unspecified, C=AU\" -ext \"SAN=DNS:silencer.gateway\" -ext \"BC=ca:true\" Enable HTTPS accessChange jetty-https.xml file: 123456789101112terrence@Silencer /Applications/nexus-3.0.0-03/etc00:18:59 𝜆 diff jetty-https.xml jetty-https.xml.orig25,26c25,26&lt; &lt;Set name=\"KeyStorePassword\"&gt;changeit&lt;/Set&gt;&lt; &lt;Set name=\"KeyManagerPassword\"&gt;changeit&lt;/Set&gt;---&gt; &lt;Set name=\"KeyStorePassword\"&gt;OBF:1v2j1uum1xtv1zej1zer1xtn1uvk1v1v&lt;/Set&gt;&gt; &lt;Set name=\"KeyManagerPassword\"&gt;OBF:1v2j1uum1xtv1zej1zer1xtn1uvk1v1v&lt;/Set&gt;28c28&lt; &lt;Set name=\"TrustStorePassword\"&gt;changeit&lt;/Set&gt;---&gt; &lt;Set name=\"TrustStorePassword\"&gt;OBF:1v2j1uum1xtv1zej1zer1xtn1uvk1v1v&lt;/Set&gt; Add SSL port and include jetty-https.xml in file: 12345678terrence@Silencer /Applications/nexus-3.0.0-03/etc00:19:06 𝜆 diff org.sonatype.nexus.cfg org.sonatype.nexus.cfg.orig3d2&lt; application-port-ssl=84445c4&lt; nexus-args=$&#123;karaf.etc&#125;/jetty.xml,$&#123;karaf.etc&#125;/jetty-http.xml,$&#123;karaf.etc&#125;/jetty-https.xml,$&#123;karaf.etc&#125;/jetty-http-redirect-to-https.xml,$&#123;karaf.etc&#125;/jetty-requestlog.xml---&gt; nexus-args=$&#123;karaf.etc&#125;/jetty.xml,$&#123;karaf.etc&#125;/jetty-http.xml,$&#123;karaf.etc&#125;/jetty-requestlog.xml Retrieve server’s certificate 1234567891011121314151617181920𝜆 keytool -printcert -rfc -sslserver silencer.bigpond:8444 &gt; silencer.bigpond.pem-----BEGIN CERTIFICATE-----MIIDkDCCAnigAwIBAgIEAqo9kTANBgkqhkiG9w0BAQsFADBgMQswCQYDVQQGEwJBVTEUMBIGA1UECBMLVW5zcGVjaWZpZWQxFDASBgNVBAcTC1Vuc3BlY2lmaWVkMREwDwYDVQQKEwhTb25hdHlwZTESMBAGA1UEAwwJKi5iaWdwb25kMB4XDTE2MDYxMjExMzY1M1oXDTMwMDIxOTExMzY1M1owYDELMAkGA1UEBhMCQVUxFDASBgNVBAgTC1Vuc3BlY2lmaWVkMRQwEgYDVQQHEwtVbnNwZWNpZmllZDERMA8GA1UEChMIU29uYXR5cGUxEjAQBgNVBAMMCSouYmlncG9uZDCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAJNO5mDpBDQQ8n4t0P2z8ChWzIFQ3Pf+5U8x6P17O3WtKTfsbuRYobHYmas5tVdVdnLIqpb4JV9DWIoS+CNG6cRLy3GIWWT7CbjsrpDlOTArslvk3KuzQ0dsZNflRfdd+ughI2LczehEfhzPJzA+ZU8Am1CadM+VUa+T6MilFQMXpWfjND6BNnV+qr/MX1QQfSjiWt7oWBex0BB0VPv9ooBZUqO+8jk5fUY8wEIa/kqLUqIKGxIUx9BMQBwBJwDKZmK93DXSPvAFYbKQjj6/nbV9R1VWmR7fhkLG+Ixlx5ld2dxv4+xvXmS8s4NanBtKZWUfEYVPp7gUF9HZoW9A1jcCAwEAAaNSMFAwDAYDVR0TBAUwAwEB/zAhBgNVHREEGjAYghBzaWxlbmNlci5iaWdwb25khwQKAAAJMB0GA1UdDgQWBBQV3WTuC+GI8lHtH0uL+kYqTG+vczANBgkqhkiG9w0BAQsFAAOCAQEAUwL+qnKVT0ENZEZnDjB+cjPfvkeWOD05PrGUOn4YB4vllq2S6Cgfm0OaZ+vMt3KMXPf9pIgZ797jdPhOP/s5IVJItldky+u/Hk9gNtUwEjpgl0MjhSm/PqxR5XoJdkYlvUdtq+PTrU5RU3v3GImeOmlI4mM5PaZ6OT8HC5VMX5s9RawBr/5EbJHRM7EN8r3g4Y/2109YoHoiWAhnN6TC3RhmCoQqGOiPsS732KHUz3KqXVbq9VTRdA3dXqFj1cUSet1TXTPisaiehffvbqYm2vrJ5WYgqCwb8TadDg66TToj080qvA8cXAF7qlA8pOImrbVOs7tdANSAs+AOcqCkiA==-----END CERTIFICATE----- To get another Source Code Repository server’s certificate 1𝜆 keytool -printcert -rfc -sslserver bitbucket.cd.paradise.org:443 &gt; bitbucket.cd.paradise.org.pem TestRestart Nexus and access: https://localhost:8444 Note Use utility tool “KeyStore Explorer” add additional CA certificates into keystore.jks file, especially when Gradle / Maven output error like: 1&gt; sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target","tags":[]},{"title":"Hello World","date":"2017-01-13T08:43:03.000Z","path":"2017/01/13/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[]}]}